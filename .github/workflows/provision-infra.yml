name: Create AKS Cluster

on:
  workflow_dispatch:
    inputs:
      resource-group-name:
        description: 'Azure Resource Group Name'
        required: true
      aks-cluster-name:
        description: 'Azure AKS Cluster Name'
        required: true

jobs:
  create-aks-cluster:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create Resource Group
      run: |
        az group create --name ${{ github.event.inputs.resource-group-name }} --location eastus
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create AKS Cluster
      run: |
        az provider register --namespace Microsoft.Network
        az aks create --resource-group ${{ github.event.inputs.resource-group-name }} --name ${{ github.event.inputs.aks-cluster-name }} --node-count 1 --generate-ssh-keys
        az aks get-credentials --resource-group ${{ github.event.inputs.resource-group-name }} --name ${{ github.event.inputs.aks-cluster-name }}
      env:
        AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy NGINX Ingress Controller
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

    - name: Wait for Ingress Controller Deployment
      run: kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s
 
    - name: Wait for LoadBalancer IP
      run: |
        ip=""
        while [ -z $ip ]; do
          echo "Waiting for LoadBalancer IP..."
          ip=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          [ -z $ip ] && sleep 10
        done
        echo "LoadBalancer IP: $ip"

    - name: Install ArgoCD
      run: |
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
        kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
        kubectl -n argocd create secret generic github-token --from-literal=token=${{ secrets.TOKEN }}

    - name: Wait for ArgoCD Server IP
      run: |
        ip=""
        while [ -z $ip ]; do
          echo "Waiting for ArgoCD Server IP..."
          ip=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          [ -z $ip ] && sleep 10
        done
        echo "ArgoCD Server IP: $ip"

    - name: Get ArgoCD Initial Admin Secret
      run: |
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d

    - name: Create ArgoCD ApplicationSet For Preview Environments
      run: |
        kubectl apply -n argocd -f ${{github.workspace}}/pr-envs/application-set.yaml

    - name: Create ArgoCD Application For Staging Environment
      run: |
        kubectl apply -n argocd -f ${{github.workspace}}/staging/application.yaml